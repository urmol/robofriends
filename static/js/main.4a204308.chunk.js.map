{"version":3,"sources":["components/SearchBox.js","components/Card.js","components/CardList.js","components/Scroll.js","components/ErrorBoundary.js","components/CounterButton.js","components/Header.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["SearchBox","searchField","searchChange","console","log","className","aria-label","type","placeholder","onChange","Card","id","name","email","src","alt","CardList","robots","map","user","i","key","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","errorInfo","this","setState","Component","CounterButton","updateCount","count","nextProps","nextState","nextContext","color","onClick","PureComponent","Header","App","onRequestRobots","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","requestRobots","searchRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.4a204308.chunk.js","sourcesContent":["import React from \"react\";\n\nconst SearchBox = ({searchField, searchChange}) => {\n  console.log('Rendering searchbox');\n  return (\n    <div className='pa2'>\n      <input aria-label=\"search robots\"\n             className='pa3 ba b--green bg-lightest-blue'\n             type='search'\n             placeholder='search robots by name'\n             onChange={searchChange}/>\n    </div>\n  )\n}\n\nexport default SearchBox;","import React, {Fragment} from 'react';\n\nconst Card = ({id, name, email}) => {\n  return (\n    <Fragment>\n      <div id={id} className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n        <img src={`https://robohash.org/${id}?size=200x200`} alt='robot'/>\n        <div>\n          <h2>{name}</h2>\n          <p>{email}</p>\n        </div>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default Card;","import React, {Fragment} from \"react\";\nimport Card from \"./Card\";\n\nconst CardList = ({robots}) => {\n  console.log('Rendering CardList');\n  return (\n    <Fragment>\n      {\n        robots.map((user, i) => {\n          return (\n            <Card key={robots[i].id}\n                  id={robots[i].id}\n                  name={robots[i].name}\n                  email={robots[i].email}\n            />\n          );\n        })\n      }\n    </Fragment>\n  )\n}\n\nexport default CardList;","import React from \"react\";\n\nconst Scroll = (props) => {\n  return (\n    <div style={{overflowY: 'scroll', border: '2px solid black', height: '500px'}}>\n      {props.children}\n    </div>\n  );\n}\n\nexport default Scroll;","import React, {Component} from \"react\";\n\nclass ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false\n    }\n  }\n\n  componentDidCatch(error, errorInfo) {\n    this.setState( {\n      hasError: true\n    });\n  }\n\n  render() {\n    if(this.state.hasError) {\n      return <h1>Oops. This was not expected</h1>\n    }\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;","import React, {PureComponent} from \"react\";\n\nclass CounterButton extends PureComponent {\n  constructor() {\n    super();\n    this.state = {\n      count: 0\n    }\n  }\n\n  shouldComponentUpdate(nextProps, nextState, nextContext) {\n    console.log(nextProps, nextState);\n    return this.state.count !== nextState.count;\n  }\n\n  updateCount = () => {\n    // this.setState({count: this.state.count + 1});\n    this.setState(() => {\n      return {count: this.state.count + 1}\n    });\n  }\n\n  render() {\n    console.log('Rendering CounterButton');\n    return (\n      <button color={this.props.color} onClick={this.updateCount}>\n        Count: {this.state.count}\n      </button>\n    )\n  }\n}\n\nexport default CounterButton;\n","import React, {Component} from \"react\";\nimport CounterButton from \"./CounterButton\";\n\nclass Header extends Component {\n\n  render() {\n    console.log('Rendering header');\n    return (\n      <div>\n        <h1 className='f1'>RoboFriends</h1>\n        <CounterButton color={'red'}/>\n      </div>\n    );\n  }\n}\n\nexport default Header;\n","import React, {Component, Fragment} from \"react\";\nimport {connect} from \"react-redux\";\nimport SearchBox from '../components/SearchBox'\nimport CardList from '../components/CardList';\nimport Scroll from '../components/Scroll'\nimport ErrorBoundary from \"../components/ErrorBoundary\";\nimport {setSearchField, requestRobots} from \"../actions\";\n\nimport './App.css'\nimport Header from \"../components/Header\";\n\nconst mapStateToProps = (state) => {\n  return {\n    isPending: state.requestRobots.isPending,\n    robots: state.requestRobots.robots,\n    searchField: state.searchRobots.searchField,\n    error: state.requestRobots.error\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  }\n}\n\nclass App extends Component {\n\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  render() {\n    const {searchField, onSearchChange, robots, isPending} = this.props;\n    const filteredRobots = robots.filter(robot => {\n        return robot.name.toLowerCase().includes(searchField.toLowerCase());\n      }\n    );\n    return isPending ?\n      <h1 className='tc'>Loading...</h1> :\n      (\n        <Fragment>\n          <div className='tc'>\n            <Header/>\n            <SearchBox searchChange={onSearchChange}/>\n            <Scroll>\n              <ErrorBoundary>\n                <CardList robots={filteredRobots}/>\n              </ErrorBoundary>\n            </Scroll>\n          </div>\n        </Fragment>\n      )\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_FAILED, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS} from \"./constants\";\n\nexport const setSearchField = (text) => {\n  return {\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n  }\n}\n\nexport const requestRobots = () => (dispatch) => {\n  dispatch({type: REQUEST_ROBOTS_PENDING, payload: []});\n  fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\n    .catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}));\n}\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_FAILED, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS} from \"./constants\";\n\nconst initialStateSearch = {\n  searchField: ''\n}\n\nconst initialStateRobots = {\n  isPending: false,\n  robots: [],\n  error: ''\n}\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return Object.assign({}, state, {searchField: action.payload})\n    //või alternatiiv\n    // return { ...state, searchField: action.payload }\n    default:\n      return state;\n  }\n};\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return Object.assign({}, state, {isPending: true})\n    case REQUEST_ROBOTS_SUCCESS:\n      return Object.assign({}, state, {isPending: false, robots: action.payload})\n    case REQUEST_ROBOTS_FAILED:\n      return Object.assign({}, state, {isPending: false, error: action.payload})\n    default:\n      return state;\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {createStore, applyMiddleware, combineReducers} from \"redux\";\nimport {createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App'\nimport * as serviceWorker from './serviceWorker';\nimport {searchRobots, requestRobots} from \"./reducers\";\nimport 'tachyons';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots, requestRobots});\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App/>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}